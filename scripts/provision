#!/usr/bin/env node

var cmd = require('commander');
var async = require('async');

cmd
  .version('0.0.1')
  .usage('[options] <ip> <stack>')
  .option('-k, --keys', 'Install public ssh keys')
  .option('-u, --user', 'Create deploy user')
  .option('-i, --install', 'Install software')
  .option('-e, --environment <config>', 'Push .env.json file')
  .option('-s, --service', 'Create the service')
  .option('-a, --all', 'Perform all provisioning steps');

cmd.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ provision -a 1.2.3.4 config/web.stack.json');
  console.log('');
});

cmd.parse(process.argv);

var stack, constants;
var ip = cmd.args[0];
var stack_file = process.cwd() + '/' + cmd.args[1];
var constants_file = process.cwd() + '/package.json';
var script;


if (cmd.all) {
  cmd.prompt('config file (eg. config/production.env.json):', function(environment) {
    cmd.environment = environment;
    init();
  });
}
else {
  init();
}


function section(name) {
  console.log('\n=== ' + name + ' ===');
}

function init() {
  console.log('\nProvisioning ' + ip );
  console.log('Using ' + stack_file);

  try {
    stack = require(stack_file);
  }
  catch(e) {
    process.stdout.write(cmd.helpInformation());
    return;
  }

  var pkg = require(constants_file);
  constants = pkg.constants;
  constants.name = pkg.name;

  var options = {
    dir: process.cwd(),
    host: ip,
    stack: stack,
    constants: constants,
    config_file: process.cwd() + '/' + cmd.environment
  };

  script = require('./lib/' + stack.type + '/provision')(options);

  function processSection(sect, callback) {
    if (cmd.all || cmd[sect]) {
      section(sect);
      var fn = script[sect];
      if (fn) {
        return fn(callback);
      }
      else {
        console.warn("No script found for " + sect);
        return callback();
      }
    }
    return callback();
  }

  function complete(err, result) {
    console.log('\ndone.');
  }

  async.forEachSeries(['keys', 'user', 'install', 'environment', 'service'], processSection, complete);
}
