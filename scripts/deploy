#!/usr/bin/env node

var cmd = require('commander');
var async = require('async');

cmd
  .version('0.0.1')
  .usage('[options] <host> <environment>')
  
  
  .option('-k, --keys', 'Install public ssh keys')
  .option('-s, --setup', 'Perform initial setup')
  .option('-u, --user', 'Create deploy user')
  .option('-i, --install', 'Install software')
  .option('-r, --repo', 'Create git repository')
  .option('-e, --environment <config>', 'Use specified file as .env.json')
  .option('-a, --all', 'Perform all provisioning steps');

cmd.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ deploy -a 1.2.3.4 config/production.env.json');
  console.log('');
});

cmd.parse(process.argv);

var config, constants;
var host = cmd.args[0];
var env_file = process.cwd() + '/' + cmd.args[1];
var constants_file = process.cwd() + '/package.json';
var script;


init();


function section(name) {
  console.log('\n=== ' + name + ' ===');
}

function init() {
  console.log('\nProvisioning ' + host );
  console.log('Using ' + config_file);

  try {
    config = require(config_file);
  }
  catch(e) {
    process.stdout.write(cmd.helpInformation());
    return;
  }

  var pkg = require(constants_file);
  constants = pkg.constants;
  constants.name = pkg.name;

  var options = {
    dir: process.cwd(),
    host: host,
    config: config,
    constants: constants
  };

  script = require('./lib/' + config.type + '/provision')(options);

  async.waterfall([

    function setup(callback) {
      if (cmd.all || cmd.setup) {
        section('Setup');
        return script.setup(callback);
      }
      return callback();
    },

    function user(callback) {
      if (cmd.all || cmd.user) {
        section('User');
        return script.user(callback);
      }
      return callback();
    },

    function keys(callback) {
      if (cmd.all || cmd.keys) {
        section('Keys');
        return script.keys(callback);
      }
      return callback();
    },

    function repo(callback) {
      if (cmd.all || cmd.repo) {
        section('Repository');
        return script.repo(callback);
      }
      return callback();
    },

    function install(callback) {
      if (cmd.all || cmd.install) {
        section('Install');
        return script.install(callback);
      }
      return callback();
    }
  ],

  function complete(err, result) {
    console.log('\ndone.');
  });
}
